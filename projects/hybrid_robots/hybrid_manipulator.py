# -*- coding: utf-8 -*-"""@author: alxgr"""###############################################################################import numpy as np###############################################################################from pyro.dynamic import hybridfrom pyro.dynamic import manipulator##############################################################################################################################################################        class HybridManipulator( manipulator.Manipualtor , hybrid.SwitchedSystem ):            ############################    def __init__(self, dof = 1 , m = 1 , e = 1 , k = 2):        """ """                # initialize standard params        manipulator.Manipualtor.__init__(self, dof = 1 , m = 1 , e = 1)                # Name        self.name = str(dof) + 'Hybrid Manipulator Robot'                # Number of discrete modes        self.k = k                  # Actuator        self.R_options = [ np.diag( np.ones( self.dof ) ) ,                            np.diag( np.ones( self.dof ) ) ,                            np.diag( np.ones( self.dof ) ) ]                            ###########################################################################    def H_arm(self, q ):        """         Inertia matrix         ----------------------------------        dim( H ) = ( dof , dof )                such that --> Kinetic Energy = 0.5 * dq^T * H(q) * dq                """                  H = np.diag( np.ones( self.dof ) ) # Default is identity matrix                return H            ###########################################################################    def H_actuators(self, u ):        """   """                  H = np.diag( np.ones( self.dof ) ) # Default is identity matrix                return H        ###########################################################################    def H(self, q , u ):        """   """                  H_arm        =  self.H_arm( q )        H_actuators  =  self.H_actuators( u )                H = H_arm + H_actuators                return H                