# -*- coding: utf-8 -*-"""Created on Jun 2 2021@author: Alex"""import numpy as npfrom pyro.dynamic import tranferfunctionfrom pyro.dynamic import statespacefrom pyro.control import linearm = 1k = 2b = 2A = np.array([ [ 0    ,    1 ],                [ -k/m , -b/m ] ])B = np.array([ [ 0 ],               [ 1 ]])C = np.array([ [ 1 , 0 ]])D = np.array([ [ 0 ]])plant = statespace.StateSpaceSystem(A, B, C, D)plant.name = 'Mass-Spring-Damper'plant.input_label = [ 'Force']plant.input_units = [ '[N]']plant.output_label = ['Position']plant.output_units = ['[m]']plant.state_label = [ 'Position','Velocity']plant.state_units = [ '[m]', '[m/s]']tf    = tranferfunction.ss2tf( plant, 0, 0)tf.bode_plot()tf.pz_map()kp  = 10ki  = 3kd  = 0tau = 0.1pid = linear.PIDController(kp,ki,kp,tau)pid.sat = 1000000pid.rbar[0] = 1closed_loop_sys = pid + plantcl_ss = statespace.linearize( closed_loop_sys )cl_tf = tranferfunction.ss2tf( cl_ss, 0, 0)cl_tf.bode_plot()cl_tf.pz_map()closed_loop_sys.plot_trajectory('y')closed_loop_sys.plot_trajectory_with_internal_states('xu')